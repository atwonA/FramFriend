<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🌴 Crop Identifier</title>
<div class="flex justify-end mb-4">
    <div id="google_translate_element"></div>
</div>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>

    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .crop-card {
            transition: all 0.3s ease;
        }
        .crop-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
<script type="text/javascript">
  function googleTranslateElementInit() {
    new google.translate.TranslateElement({
      pageLanguage: 'en',
      includedLanguages: 'hi,ta,te,kn,ml,bn,gu,mr,pa,ur,en', // Hindi, Tamil, Telugu, Kannada, Malayalam, Bengali, Gujarati, Marathi, Punjabi, Urdu
      layout: google.translate.TranslateElement.InlineLayout.SIMPLE
    }, 'google_translate_element');
  }
</script>
<script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
    </style>
</head>
<body class="min-h-screen bg-gray-50 dark:bg-gray-900">
<!-- Header -->
<div class="text-center mb-8">
    <h1 class="text-4xl font-bold text-gray-800 dark:text-white mb-2">
        🌴 Crop Identifier
    </h1>
    <p class="text-gray-600 dark:text-gray-300">
        Upload or capture a photo to identify your crop and get growing information
    </p>
</div>
    <script>
        // Dark mode detection
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });
    </script>
<div class="container mx-auto px-4 py-8 max-w-4xl">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-800 dark:text-white mb-2">
                🌴 Crop Identifier
            </h1>
            <p class="text-gray-600 dark:text-gray-300">
                Upload or capture a photo to identify your crop and get growing information
            </p>
        </div>

        <!-- Model Status -->
        <div id="modelStatus" class="mb-6 p-4 bg-yellow-100 dark:bg-yellow-900/30 border-l-4 border-yellow-500 rounded-r">
            <div class="flex items-center">
                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-500 mr-2"></div>
                <span class="text-yellow-800 dark:text-yellow-200">Loading AI model...</span>
            </div>
        </div>

        <!-- Upload Section -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
            <div class="text-center">
                <div id="imageUploadArea" class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 cursor-pointer hover:border-blue-500 transition-colors">
                    <div class="space-y-4">
                        <div class="text-6xl">📸</div>
                        <div>
                            <p class="text-lg font-medium text-gray-700 dark:text-gray-300">Upload or Capture Crop Photo</p>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Click to select file or use camera</p>
                        </div>
                    </div>
                </div>
               
                <input type="file" id="imageInput" accept="image/*" class="hidden">
               
                <div class="mt-4 flex flex-col sm:flex-row gap-3 justify-center">
                    <button id="uploadBtn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-base">
                        📁 Upload Photo
                    </button>
                    <button id="cameraBtn" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-base">
                        📸 Take Photo
                    </button>
</div>
            </div>

            <!-- Preview Image -->
            <div id="imagePreview" class="mt-6 hidden">
                <img id="previewImg" class="max-w-full max-h-64 mx-auto rounded-lg shadow">
                <button id="analyzeBtn" class="mt-4 w-full px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors font-medium text-base">
                    🔍 Analyze Crop
                </button>
            </div>
        </div>

        <!-- Results Section -->
        <div id="resultsSection" class="hidden">
            <!-- Prediction Results -->
            <div id="predictionResults" class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
                <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-4">🎯 Identification Results</h2>
                <div id="predictionList" class="space-y-3"></div>
            </div>

            <!-- Crop Information -->
            <div id="cropInfo" class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-4">👨🏻‍🌾 Crop Information</h2>
                <div id="cropDetails" class="space-y-4"></div>
            </div>
        </div>
    </div>

    <script>
        // Complete crop database with ALL your crops
        const cropDatabase = {
            Rice: {
name: "Rice",
                emoji: "🌾",
                season: "Kharif (Monsoon)",
                climate: "Hot, humid with abundant water",
                soilType: "Clay or clay loam, waterlogged conditions",
                plantingTime: "June-July, November-December",
                harvestTime: "October-November, April-May",
                waterRequirement: "Very High (1000-2000mm)",
                tips: [
                    "Prepare puddled fields for transplanting",
                    "Maintain water level 2-5cm above soil surface",
                    "Use certified seeds for better yield",
                    "Apply organic manure before planting",
                    "Control weeds in early growth stages"
                ]
             },
            Barley: {
name: "Barley",
emoji: "🌾",
season: "Rabi (Winter)",
climate: "Cool and dry climate",
soilType: "Well-drained loamy to sandy loam soil with neutral pH",
plantingTime: "October to December",
harvestTime: "120-150 days after sowing",
waterRequirement: "Low to Moderate (300-400mm)",
tips: [
    "Sow seeds 4-5cm deep with 20-25cm row spacing",
    "Ensure good seedbed preparation for better germination",
    "Avoid waterlogging, especially during early growth stages",
    "Apply balanced fertilizers for better yield",
    "Harvest when grains are hard and golden yellow"                ]
            },
            Pumpkin: {
                name: "Pumpkin",
                emoji: "🎃",
                season: "Kharif (Monsoon) & Zaid (Summer)",
                climate: "Warm and humid climate",
                soilType: "Well-drained sandy loam soil rich in organic matter",
                plantingTime: "June-July, February-March",
                harvestTime: "90-120 days after sowing",
                waterRequirement: "Moderate to High (500-800mm)",
                tips: [
                    "Sow seeds 2-3cm deep with 60-90cm spacing",
                    "Use well-rotted compost before planting",
                    "Support vines to prevent fruit rot",
                    "Irrigate at regular intervals, especially during flowering",
                    "Harvest when fruit skin turns hard and changes color"
                ]
            },
            Maize: {
name: "Maize",
emoji: "🌽",
season: "Kharif (Monsoon), Rabi (Winter), and Zaid (Summer)",
climate: "Warm climate with moderate rainfall and plenty of sunlight",
soilType: "Well-drained loamy soil rich in organic matter",
plantingTime: "June-July, October-November, February-March",
harvestTime: "90-120 days after sowing",
waterRequirement: "Moderate (500-750mm)",
tips: [
    "Sow seeds 3-5cm deep with 20-25cm plant spacing and 60-75cm between rows",
    "Use organic compost or farmyard manure before sowing",
    "Control weeds during early growth stages",
    "Irrigate at key stages: knee-high, tasseling, and grain filling",
    "Harvest when husks dry and kernels are hard and shiny"                ]
            },
            Saffron: {
                name: "Saffron",
                emoji: "🌸",
                season: "Rabi (Winter)",
                climate: "Cold and dry climate with good sunlight",
                soilType: "Well-drained loamy or sandy soil rich in humus",
                plantingTime: "August-September",
                harvestTime: "90-120 days after planting",
                waterRequirement: "Low (200-400mm)",
                tips: [
                    "Plant corms 10-15cm apart and 10cm deep",
                    "Ensure good drainage to prevent rot",
                    "Avoid excessive watering after sprouting",
                    "Weed regularly to avoid competition",
                    "Harvest stigmas early morning and dry immediately"
                ]
            },
            Potato: {
                name: "Potato",
                emoji: "🥔",
                season: "Rabi (Winter)",
                climate: "Cool climate with short days",
                soilType: "Loose, well-drained sandy loam soil",
                plantingTime: "October-November",
                harvestTime: "90-120 days after planting",
                waterRequirement: "Low to Moderate (300-400mm)",
                tips: [
                    "Use disease-free seed tubers cut into 40-50g pieces",
                    "Plant at a depth of 5-10cm with proper spacing",
                    "Mound soil around plants during growth (earthing-up)",
                    "Irrigate at critical stages: tuber formation and bulking",
                    "Harvest when leaves yellow and vines dry up"
                ]
            },
            Cucumber: {
                name: "Cucumber",
emoji: "🥒",
season: "Zaid (Summer) & Kharif (Monsoon)",
climate: "Warm and humid climate with ample sunlight",
soilType: "Well-drained sandy loam soil rich in organic matter",
plantingTime: "February–March, June–July",
harvestTime: "50-70 days after sowing",
waterRequirement: "Moderate (400-600mm)",
tips: [
    "Sow seeds 1.5-2cm deep with 45-60cm spacing",
    "Apply compost or organic manure before sowing",
    "Provide support or trellis for better fruit shape and yield",
    "Ensure consistent watering, especially during flowering and fruiting",
    "Harvest when fruits are medium-sized, green, and tender"                ]
            },
            Tomato: {
                name: "Tomato",
emoji: "🍅",
season: "Kharif (Monsoon), Rabi (Winter), and Zaid (Summer)",
climate: "Warm climate with moderate humidity and temperature between 20–30°C",
soilType: "Well-drained loamy soil rich in organic matter with pH 6.0–7.0",
plantingTime: "June–July, October–November, January–February",
harvestTime: "60-85 days after transplanting",
waterRequirement: "Moderate (600-800mm)",
tips: [
    "Transplant healthy seedlings 30-45cm apart with 75-90cm between rows",
    "Use compost or well-rotted manure before planting",
    "Stake or support plants to prevent fruit rot and disease",
    "Water regularly, especially during flowering and fruiting stages",
    "Harvest when fruits are firm and fully red for best taste"                ]
            },
            Onion: {
name: "Onion",
emoji: "🧅",
season: "Rabi (Winter) and Kharif (Monsoon)",
climate: "Cool weather during early growth and dry weather at maturity",
soilType: "Well-drained loamy or sandy loam soil rich in organic matter with pH 6.0–7.5",
plantingTime: "October–December (Rabi), May–July (Kharif)",
harvestTime: "100-150 days after transplanting (depending on variety)",
waterRequirement: "Moderate (350-550mm)",
tips: [
    "Transplant seedlings 10-15cm apart with 20-25cm row spacing",
    "Apply compost or farmyard manure before transplanting",
    "Avoid waterlogging to prevent bulb rot",
    "Reduce watering before harvest to help bulbs mature",
    "Harvest when 50–70% of tops fall over and necks become soft"                ]
            },
            Sugarcane: {
                name: "Sugarcane",
                emoji: "🎋",
                season: "Kharif (Monsoon) & Rabi (Winter)",
                climate: "Hot and humid climate with long growing season",
                soilType: "Deep, fertile loamy soil with high organic content and good drainage",
                plantingTime: "February-March (Rabi), June-July",
                harvestTime: "10-16 months after planting",
                waterRequirement: "High (1500-2500mm)",
                tips: [
                    "Maintain proper row spacing (90-120cm)",
                    "Apply heavy doses of organic manure",
                    "Earthing up at 4-5 months",
                    "Harvest at proper maturity for sugar content",
                    "Plant healthy 3-budded setts in furrows 10-15cm deep",
                    "Requires frequent irrigation, especially during elongation stage",
                    "Apply FYM and split doses of nitrogen and potassium"
                ]
            },
            Cotton: {
                name: "Cotton",
                emoji: "🧵",
                season: "Kharif (Summer)",
                climate: "Warm climate with plenty of sunshine, long frost-free period",
                soilType: "Deep, well-drained black cotton soil",
                plantingTime: "June-July",
                harvestTime: "150-180 days after sowing",
                waterRequirement: "Moderate to High (500-800mm)",
                tips: [
                    "Plant when soil temperature is above 18°C",
                    "Sow seeds 3-5cm deep with 60-75cm spacing",
                    "Use pest-resistant or Bt cotton varieties as per region",
                    "Apply nitrogen and potassium in split doses",
                    "Irrigate at flowering and boll development stages",
                    "Monitor and control bollworms and whiteflies regularly",
                    "Harvest when bolls are fully open and dry"
                ]
            },
            Soybean: {
                name: "Soybean",
                emoji: "🌰",
                season: "Kharif (Monsoon)",
                climate: "Warm and moist climate with moderate rainfall",
                soilType: "Well-drained loamy soil with good organic content",
                plantingTime: "June-July",
                harvestTime: "90-120 days after sowing",
                waterRequirement: "Moderate to High (500-800mm)",
                tips: [
                    "Sow seeds 3-4cm deep with 30-40cm row spacing",
                    "Inoculate seeds with Rhizobium for better nitrogen fixation",
                    "Avoid waterlogging, especially at flowering and pod filling stages",
                    "Weed control within 3 weeks of sowing is crucial",
                    "Harvest when leaves yellow and 80% pods turn brown"
                ]
          
            },
        };

        let model = null;
        let isModelLoaded = false;

        // Your model URLs
        const MODEL_URL = "https://teachablemachine.withgoogle.com/models/j2eq85eVwi/";
        const METADATA_URL = "https://teachablemachine.withgoogle.com/models/j2eq85eVwi/";

        // Initialize the model
        async function loadModel() {
            try {
                console.log('Loading model from:', MODEL_URL);
                model = await tmImage.load(MODEL_URL, METADATA_URL);
                isModelLoaded = true;
               
                document.getElementById('modelStatus').innerHTML = `
                    <div class="flex items-center">
                        <span class="text-green-600 dark:text-green-400 mr-2">✅</span>
                        <span class="text-green-800 dark:text-green-200">AI model loaded successfully!</span>
                    </div>
                `;
                document.getElementById('modelStatus').className = "mb-6 p-4 bg-green-100 dark:bg-green-900/30 border-l-4 border-green-500 rounded-r";
            } catch (error) {
                console.error('Error loading model:', error);
                document.getElementById('modelStatus').innerHTML = `
                    <div class="flex items-center">
                        <span class="text-red-600 dark:text-red-400 mr-2">❌</span>
                        <span class="text-red-800 dark:text-red-200">Failed to load model: ${error.message}</span>
                    </div>
                `;
                document.getElementById('modelStatus').className = "mb-6 p-4 bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 rounded-r";
}
        }

        // Event listeners
        document.getElementById('uploadBtn').addEventListener('click', () => {
            document.getElementById('imageInput').click();
        });

        document.getElementById('cameraBtn').addEventListener('click', () => {
            const input = document.getElementById('imageInput');
            input.setAttribute('capture', 'environment');
            input.click();
        });

        document.getElementById('imageUploadArea').addEventListener('click', () => {
            document.getElementById('imageInput').click();
        });

        document.getElementById('imageInput').addEventListener('change', handleImageUpload);
        document.getElementById('analyzeBtn').addEventListener('click', analyzeImage);

        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = document.getElementById('previewImg');
img.src = e.target.result;
                    document.getElementById('imagePreview').classList.remove('hidden');
                    document.getElementById('resultsSection').classList.add('hidden');
                };
                reader.readAsDataURL(file);
            }
        }

        async function analyzeImage() {
            if (!isModelLoaded) {
                alert('Please wait for the model to load first.');
                return;
            }

            const img = document.getElementById('previewImg');
            const analyzeBtn = document.getElementById('analyzeBtn');
           
            analyzeBtn.innerHTML = '🔄 Analyzing...';
            analyzeBtn.disabled = true;

            try {
                const predictions = await model.predict(img);
                predictions.sort((a, b) => b.probability - a.probability);
                displayResults(predictions);
            } catch (error) {
                console.error('Error during prediction:', error);
                alert('Error analyzing image. Please try again.');
            } finally {
                analyzeBtn.innerHTML = '🔍 Analyze Crop';
                analyzeBtn.disabled = false;
            }
        }

        function displayResults(predictions) {
            document.getElementById('resultsSection').classList.remove('hidden');
           
            const predictionList = document.getElementById('predictionList');
            predictionList.innerHTML = '';
           
            predictions.forEach((prediction, index) => {
                const confidence = (prediction.probability * 100).toFixed(1);
                const isTop = index === 0;
               
                const predictionDiv = document.createElement('div');
                predictionDiv.className = `flex items-center justify-between p-3 rounded-lg ${
                    isTop ? 'bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700' :
                    'bg-gray-100 dark:bg-gray-700'
}`;
               
                predictionDiv.innerHTML = `
                    <div class="flex items-center">
                        <span class="text-2xl mr-3">${isTop ? '🏆' : '📊'}</span>
                        <div>
                            <span class="font-medium text-gray-800 dark:text-gray-200">${prediction.className}</span>
                            ${isTop ? '<span class="ml-2 text-xs bg-green-600 text-white px-2 py-1 rounded">BEST MATCH</span>' : ''}
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="font-bold text-lg ${isTop ? 'text-green-600' : 'text-gray-600 dark:text-gray-400'}">${confidence}%</div>
                        <div class="w-24 bg-gray-200 dark:bg-gray-600 rounded-full h-2 mt-1">
                            <div class="h-2 rounded-full ${isTop ? 'bg-green-600' : 'bg-gray-400'}" style="width: ${confidence}%"></div>
                        </div>
                    </div>
                `;
predictionList.appendChild(predictionDiv);
            });
           
            if (predictions.length > 0) {
                displayCropInfo(predictions[0].className);
            }
           
            document.getElementById('resultsSection').scrollIntoView({ behavior: 'smooth' });
        }

        function displayCropInfo(cropName) {
            const cropDetails = document.getElementById('cropDetails');
           
            // Normalize crop name and try to find a match
            let cropData = cropDatabase[cropName];
           
            // If no exact match, try case-insensitive search
            if (!cropData) {
                const normalizedName = cropName.toLowerCase().trim();
                const matchingKey = Object.keys(cropDatabase).find(key =>
                    key.toLowerCase().trim() === normalizedName
                );
                cropData = matchingKey ? cropDatabase[matchingKey] : null;
            }
           
            // If still no match, try partial matching
            if (!cropData) {
                const normalizedName = cropName.toLowerCase().trim();
                const matchingKey = Object.keys(cropDatabase).find(key =>
                    key.toLowerCase().includes(normalizedName) ||
                    normalizedName.includes(key.toLowerCase())
                );
                cropData = matchingKey ? cropDatabase[matchingKey] : null;
            }
           
            if (!cropData) {
                cropDetails.innerHTML = `
                    <div class="text-center py-8">
                        <div class="text-6xl mb-4">🌱</div>
                        <h3 class="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-2">${cropName}</h3>
                        <p class="text-gray-600 dark:text-gray-400">Detailed information for this crop will be added soon.</p>
                        <p class="text-sm text-gray-500 dark:text-gray-500 mt-2">Model prediction: "${cropName}"</p>
                        <details class="mt-2">
                            <summary class="text-sm text-gray-500 cursor-pointer">Available crops in database</summary>
                            <p class="text-xs text-gray-400 mt-2">${Object.keys(cropDatabase).join(', ')}</p>
                        </details>
                    </div>
`;
                return;
            }
           
            cropDetails.innerHTML = `
                <div class="crop-card bg-white dark:bg-gray-700 p-6 rounded-lg">
                    <div class="text-center mb-6">
                        <div class="text-6xl mb-2">${cropData.emoji}</div>
                        <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-200">${cropData.name}</h3>
                    </div>
                   
                    <div class="grid md:grid-cols-2 gap-6">
                        <div class="space-y-4">
                            <div class="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg">
                                <h4 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">🗓️ Growing Season</h4>
                                <p class="text-blue-700 dark:text-blue-300">${cropData.season}</p>
                            </div>
                           
                            <div class="bg-green-50 dark:bg-green-900/30 p-4 rounded-lg">
                                <h4 class="font-semibold text-green-800 dark:text-green-200 mb-2">🌡️ Climate</h4>
                                <p class="text-green-700 dark:text-green-300">${cropData.climate}</p>
                            </div>
                           
                            <div class="bg-amber-50 dark:bg-amber-900/30 p-4 rounded-lg">
                                <h4 class="font-semibold text-amber-800 dark:text-amber-200 mb-2">🏔️ Soil Type</h4>
                                <p class="text-amber-700 dark:text-amber-300">${cropData.soilType}</p>
                            </div>
                        </div>
                       
                        <div class="space-y-4">
                            <div class="bg-purple-50 dark:bg-purple-900/30 p-4 rounded-lg">
                                <h4 class="font-semibold text-purple-800 dark:text-purple-200 mb-2">🌱 Planting Time</h4>
                                <p class="text-purple-700 dark:text-purple-300">${cropData.plantingTime}</p>
                            </div>
                           
                            <div class="bg-orange-50 dark:bg-orange-900/30 p-4 rounded-lg">
                                <h4 class="font-semibold text-orange-800 dark:text-orange-200 mb-2">🚜 Harvest Time</h4>
                                <p class="text-orange-700 dark:text-orange-300">${cropData.harvestTime}</p>
                            </div>
                           
                            <div class="bg-cyan-50 dark:bg-cyan-900/30 p-4 rounded-lg">
                                <h4 class="font-semibold text-cyan-800 dark:text-cyan-200 mb-2">💧 Water Requirement</h4>
                                <p class="text-cyan-700 dark:text-cyan-300">${cropData.waterRequirement}</p>
                            </div>
                        </div>
                    </div>
<div class="mt-6 bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                        <h4 class="font-semibold text-gray-800 dark:text-gray-200 mb-3">💡 Growing Tips</h4>
                        <ul class="space-y-2">
                            ${cropData.tips.map(tip => `
                                <li class="flex items-start">
                                    <span class="text-green-500 mr-2 mt-0.5">✓</span>
                                    <span class="text-gray-700 dark:text-gray-300">${tip}</span>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                </div>
            `;
        }

        // Initialize app
        loadModel();
    </script>
</body>
</html>
